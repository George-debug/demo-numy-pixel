{"version":3,"sources":["Console/Template/ConsoleComps.jsx","Console/Template/Slim.jsx","Console/Template/Squared.jsx","Console/Template/Wide.jsx","Console/Template/index.jsx","MeasureAndRender/index.jsx","Console/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["ConsoleComps","buttonConfig","duration","buttonsActions","small","console","log","medium","left","up","right","down","big","Speaker","top","unit","x","y","width","height","fillOpacity","Body","props","bottom","coloredPath","fill","color","d","Wide","wide","Screen","SmallButton","action","length","useSpring","alpha","config","set","bind","useDrag","onClick","rect","interpolate","a","SmallButtons","coords","map","i","ButtonShadow","animated","Button","halfUnit","underPath","className","g","style","transform","ArrowButtons","BigButton","Diagonal","Diagonals","Slim","size","smallButtonGap","smallButtonTop","smallButtonLeft","Fragment","version","viewBox","Array","c","Squared","smallButtonsLeft","smallButtonsTop","smallButtonsGap","l","ConsoleTemplate","ratio","Math","min","MeasureAndRender","state","measurement","hasMeasured","onWindowResize","debounce","setState","el","getBoundingClientRect","this","window","addEventListener","removeEventListener","stretch","position","childrenWithProps","React","Children","children","child","isValidElement","cloneElement","ref","node","Component","Console","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2df4b941.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { useDrag } from \"react-use-gesture\";\r\n\r\nvar ConsoleComps = {};\r\n\r\nconst buttonConfig = { duration: 75 };\r\n/*const buttonConfig = {\r\n    mass: 0.5,\r\n    tension: 500,\r\n    friction: 14,\r\n    clamp: true,\r\n};*/\r\n\r\n//dummy object\r\nconst buttonsActions = {\r\n    small: [\r\n        () => console.log(\"first\"),\r\n        () => console.log(\"second\"),\r\n        () => console.log(\"third\"),\r\n        () => console.log(\"last\"),\r\n    ],\r\n    medium: {\r\n        left: () => console.log(\"left\"),\r\n        up: () => console.log(\"up\"),\r\n        right: () => console.log(\"right\"),\r\n        down: () => console.log(\"down\"),\r\n    },\r\n    big: () => console.log(\"BIG\"),\r\n};\r\n\r\nconst Speaker = ({ left, top, unit }) => {\r\n    return (\r\n        <g>\r\n            <g>\r\n                <rect\r\n                    x={left}\r\n                    y={top + unit * 3}\r\n                    width={unit}\r\n                    height={unit}\r\n                    fillOpacity=\".5\"\r\n                />\r\n                <rect\r\n                    x={left}\r\n                    y={top + unit * 5}\r\n                    width={unit}\r\n                    height={unit}\r\n                    fillOpacity=\".5\"\r\n                />\r\n\r\n                <rect\r\n                    x={left + unit * 2}\r\n                    y={top + unit * 3}\r\n                    width={unit}\r\n                    height={unit}\r\n                    fillOpacity=\".5\"\r\n                />\r\n                <rect\r\n                    x={left + unit * 2}\r\n                    y={top + unit * 5}\r\n                    width={unit}\r\n                    height={unit}\r\n                    fillOpacity=\".5\"\r\n                />\r\n                <rect\r\n                    x={left + unit * 2}\r\n                    y={top + unit}\r\n                    width={unit}\r\n                    height={unit}\r\n                    fillOpacity=\".5\"\r\n                />\r\n\r\n                <rect\r\n                    x={left + unit * 4}\r\n                    y={top + unit * 3}\r\n                    width={unit}\r\n                    height={unit}\r\n                    fillOpacity=\".5\"\r\n                />\r\n                <rect\r\n                    x={left + unit * 4}\r\n                    y={top + unit}\r\n                    width={unit}\r\n                    height={unit}\r\n                    fillOpacity=\".5\"\r\n                />\r\n            </g>\r\n            <g>\r\n                <rect\r\n                    x={left + unit}\r\n                    y={top + unit * 2}\r\n                    width={unit}\r\n                    height={unit}\r\n                    fillOpacity=\".1\"\r\n                />\r\n                <rect\r\n                    x={left + unit}\r\n                    y={top + unit * 4}\r\n                    width={unit}\r\n                    height={unit}\r\n                    fillOpacity=\".1\"\r\n                />\r\n                <rect\r\n                    x={left + unit * 3}\r\n                    y={top}\r\n                    width={unit}\r\n                    height={unit}\r\n                    fillOpacity=\".1\"\r\n                />\r\n                <rect\r\n                    x={left + unit * 3}\r\n                    y={top + unit * 2}\r\n                    width={unit}\r\n                    height={unit}\r\n                    fillOpacity=\".1\"\r\n                />\r\n                <rect\r\n                    x={left + unit * 3}\r\n                    y={top + unit * 4}\r\n                    width={unit}\r\n                    height={unit}\r\n                    fillOpacity=\".1\"\r\n                />\r\n            </g>\r\n        </g>\r\n    );\r\n};\r\n\r\nConsoleComps.Body = (props) => {\r\n    const { right, bottom, unit } = props;\r\n    const coloredPath = `\r\n        m0 ${unit} h${unit} v-${unit} H${right - unit} v${unit} H${right}\r\n        V${bottom - 4 * unit} h-${unit} v${unit} h-${unit} v${unit}\r\n        h-${unit} v${unit} h-${unit} v${unit} H${unit} v-${unit} h-${unit}z\r\n    `;\r\n\r\n    return (\r\n        <g>\r\n            <path fill={props.color} d={coloredPath} />\r\n\r\n            <rect\r\n                x={unit}\r\n                y={0}\r\n                width={right - unit * 2}\r\n                height={unit}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n            <rect\r\n                x={right - unit}\r\n                y={unit}\r\n                width={unit}\r\n                height={bottom - unit * 5}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n            <rect\r\n                x={0}\r\n                y={unit}\r\n                width={unit}\r\n                height={bottom - unit * 2}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n            <rect\r\n                x={unit}\r\n                y={bottom - unit}\r\n                width={right - unit * 5}\r\n                height={unit}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n            <rect\r\n                x={right - unit * 2}\r\n                y={bottom - unit * 4}\r\n                width={unit}\r\n                height={unit}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n            <rect\r\n                x={right - unit * 3}\r\n                y={bottom - unit * 3}\r\n                width={unit}\r\n                height={unit}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n            <rect\r\n                x={right - unit * 4}\r\n                y={bottom - unit * 2}\r\n                width={unit}\r\n                height={unit}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n            <path\r\n                fillOpacity=\"0.3\"\r\n                d={\r\n                    props.Wide || props.wide\r\n                        ? `m${unit * 3} ${unit} v${unit * 3} h-${unit * 2}\r\n                          v${unit} h${unit * 2} V${bottom - unit * 5}\r\n                          h-${unit * 2} v${unit} h${unit * 2} V${bottom - unit}\r\n                          h${unit} V${unit}\r\n                          `\r\n                        : `m${unit} ${unit * 3} h${unit * 3} v-${unit * 2}\r\n                          h${unit} v${unit * 2} H${right - unit * 5}\r\n                          v-${unit * 2} h${unit} v${unit * 2}\r\n                          H${right - unit} v${unit} H${unit}z`\r\n                }\r\n            />\r\n            <Speaker\r\n                left={right - unit * 7}\r\n                top={bottom - unit * 8}\r\n                unit={unit}\r\n            />\r\n        </g>\r\n    );\r\n};\r\n\r\nConsoleComps.Screen = ({ left, top, right, bottom, color, unit }) => {\r\n    const coloredPath = `\r\n        M${left} ${top + unit} h${unit} v-${unit} H${right - unit}\r\n        v${unit} h${unit} V${bottom - unit * 3} h-${unit} v${unit}\r\n        h-${unit} v${unit} h-${unit} v${unit} H${left + unit} v-${unit}\r\n        h-${unit}\r\n    `;\r\n\r\n    return (\r\n        <g>\r\n            <path fill={color} d={coloredPath}></path>\r\n            <rect\r\n                x={left}\r\n                y={top + unit}\r\n                width={unit}\r\n                height={bottom - top - unit * 2}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n            <rect\r\n                x={left + unit}\r\n                y={top}\r\n                width={right - left - unit * 2}\r\n                height={unit}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n            <rect\r\n                x={right - unit}\r\n                y={top + unit}\r\n                width={unit}\r\n                height={bottom - top - unit * 4}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n            <rect\r\n                x={right - unit * 2}\r\n                y={bottom - unit * 3}\r\n                width={unit}\r\n                height={unit}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n            <rect\r\n                x={right - unit * 3}\r\n                y={bottom - unit * 2}\r\n                width={unit}\r\n                height={unit}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n            <rect\r\n                x={left + unit}\r\n                y={bottom - unit}\r\n                width={right - left - unit * 4}\r\n                height={unit}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n        </g>\r\n    );\r\n};\r\n\r\nconst SmallButton = ({ left, top, unit, action }) => {\r\n    const length = unit * 2;\r\n\r\n    const [{ alpha }, set] = useSpring(() => ({\r\n        alpha: 0,\r\n        config: buttonConfig,\r\n    }));\r\n    const bind = useDrag(({ down }) => {\r\n        set({ alpha: down ? 1 : 0 });\r\n        if (down) action();\r\n    });\r\n\r\n    return (\r\n        <g {...bind()} onClick={action}>\r\n            <rect\r\n                x={left}\r\n                y={top}\r\n                width={length}\r\n                height={unit * 2}\r\n                fillOpacity=\"0\"\r\n            />\r\n            <animated.rect\r\n                x={left}\r\n                y={alpha.interpolate((a) => top + unit * 1.5 - (unit / 2) * a)}\r\n                width={length}\r\n                height={unit / 2}\r\n                fillOpacity=\"0.1\"\r\n            />\r\n            <rect\r\n                x={left}\r\n                y={top + unit / 2}\r\n                width={length}\r\n                height={unit}\r\n                fill=\"#faaf00\"\r\n            />\r\n            <rect\r\n                x={left}\r\n                y={top + unit / 2}\r\n                width={length}\r\n                height={unit}\r\n                fillOpacity=\"0.3\"\r\n            />\r\n            <animated.rect\r\n                x={left}\r\n                y={alpha.interpolate((a) => top + (unit / 2) * a)}\r\n                width={length}\r\n                height={unit}\r\n                fill=\"#faaf00\"\r\n            />\r\n        </g>\r\n    );\r\n};\r\n\r\nConsoleComps.SmallButtons = ({ unit, coords }) => {\r\n    /*const usedSpace = right - left - unit * 6;\r\n    const middleGap = props.middleGap ?? usedSpace / 3;\r\n\r\n    const gap = (usedSpace - middleGap) / 2;\r\n    const spaces = [0, gap, middleGap + gap, middleGap + gap * 2];*/\r\n\r\n    return (\r\n        <g>\r\n            {buttonsActions.small.map((action, i) => (\r\n                <SmallButton\r\n                    key={i}\r\n                    left={coords[i][0]}\r\n                    top={coords[i][1]}\r\n                    unit={unit}\r\n                    action={action}\r\n                />\r\n            ))}\r\n        </g>\r\n    );\r\n};\r\n\r\nconst ButtonShadow = animated(({ left, top, right, unit, alpha }) => {\r\n    return (\r\n        <g>\r\n            <rect\r\n                x={left}\r\n                y={top}\r\n                width={unit / 2}\r\n                height={unit / 2}\r\n                fillOpacity={alpha}\r\n            />\r\n            <rect\r\n                x={left + unit / 2}\r\n                y={top + unit / 2}\r\n                width={right - left - unit}\r\n                height={unit / 2}\r\n                fillOpacity={alpha}\r\n            />\r\n            <rect\r\n                x={right - unit / 2}\r\n                y={top}\r\n                width={unit / 2}\r\n                height={unit / 2}\r\n                fillOpacity={alpha}\r\n            />\r\n        </g>\r\n    );\r\n});\r\n\r\nconst Button = ({ left, top, width, height, unit, action }) => {\r\n    const color = \"#faaf00\";\r\n\r\n    const halfUnit = unit / 2;\r\n\r\n    const underPath = `m${left} ${top + width - unit} h${width} v${unit}\r\n    h-${halfUnit} v${halfUnit} H${left + halfUnit}\r\n    v-${halfUnit} h-${halfUnit}z`;\r\n\r\n    const [{ alpha }, set] = useSpring(() => ({\r\n        alpha: 0,\r\n        config: buttonConfig,\r\n    }));\r\n    const bind = useDrag(({ down }) => {\r\n        set({ alpha: down ? 1 : 0 });\r\n        if (down) action();\r\n    });\r\n\r\n    return (\r\n        <g className=\"button\" {...bind()}>\r\n            <ButtonShadow\r\n                left={left}\r\n                top={alpha.interpolate((a) => top + height - (unit / 2) * a)}\r\n                right={left + width}\r\n                unit={unit}\r\n                alpha={0.1}\r\n            />\r\n            <path fill={color} d={underPath} />\r\n            <path fillOpacity=\"0.3\" d={underPath} />\r\n\r\n            <animated.g\r\n                style={{\r\n                    transform: alpha.interpolate(\r\n                        (a) => `translatey(${(unit / 2) * a}px)`\r\n                    ),\r\n                }}\r\n            >\r\n                <rect\r\n                    x={left}\r\n                    y={top + unit / 2}\r\n                    width={width}\r\n                    height={height - unit}\r\n                    fill={color}\r\n                />\r\n                <rect\r\n                    x={left}\r\n                    y={top + unit / 2}\r\n                    width={width}\r\n                    height={height - unit}\r\n                    fillOpacity=\"0.1\"\r\n                />\r\n                <rect\r\n                    x={left + unit / 2}\r\n                    y={top}\r\n                    width={width - unit}\r\n                    height={height}\r\n                    fill={color}\r\n                />\r\n            </animated.g>\r\n        </g>\r\n    );\r\n};\r\n\r\nConsoleComps.ArrowButtons = ({ left, top, unit }) => {\r\n    return (\r\n        <g>\r\n            <Button\r\n                left={left}\r\n                top={top + unit * 2.5}\r\n                width={unit * 2.5}\r\n                height={unit * 2.5}\r\n                unit={unit}\r\n                action={buttonsActions.medium.left}\r\n            />\r\n            <Button\r\n                left={left + unit * 2.5}\r\n                top={top}\r\n                width={unit * 2.5}\r\n                height={unit * 2.5}\r\n                unit={unit}\r\n                action={buttonsActions.medium.up}\r\n            />\r\n            <Button\r\n                left={left + unit * 5}\r\n                top={top + unit * 2.5}\r\n                width={unit * 2.5}\r\n                height={unit * 2.5}\r\n                unit={unit}\r\n                action={buttonsActions.medium.right}\r\n            />\r\n            <Button\r\n                left={left + unit * 2.5}\r\n                top={top + unit * 5}\r\n                width={unit * 2.5}\r\n                height={unit * 2.5}\r\n                unit={unit}\r\n                action={buttonsActions.medium.down}\r\n            />\r\n        </g>\r\n    );\r\n};\r\n\r\nConsoleComps.BigButton = ({ left, top, unit }) => {\r\n    return (\r\n        <Button\r\n            left={left}\r\n            top={top}\r\n            width={unit * 4}\r\n            height={unit * 4}\r\n            unit={unit}\r\n            action={buttonsActions.big}\r\n        />\r\n    );\r\n};\r\n\r\nconst Diagonal = ({ left, top, unit, alpha }) => {\r\n    return (\r\n        <g>\r\n            <rect\r\n                x={left + unit * 2}\r\n                y={top}\r\n                width={unit}\r\n                height={unit}\r\n                fillOpacity={alpha}\r\n            />\r\n            <rect\r\n                x={left + unit}\r\n                y={top + unit}\r\n                width={unit}\r\n                height={unit}\r\n                fillOpacity={alpha}\r\n            />\r\n            <rect\r\n                x={left}\r\n                y={top + unit * 2}\r\n                width={unit}\r\n                height={unit}\r\n                fillOpacity={alpha}\r\n            />\r\n        </g>\r\n    );\r\n};\r\n\r\nConsoleComps.Diagonals = ({ left, top, unit }) => {\r\n    return (\r\n        <g>\r\n            <Diagonal left={left} top={top} unit={unit} alpha={0.5} />\r\n            <Diagonal left={left + unit} top={top} unit={unit} alpha={0.1} />\r\n            <Diagonal\r\n                left={left + unit * 3}\r\n                top={top}\r\n                unit={unit}\r\n                alpha={0.5}\r\n            />\r\n            <Diagonal\r\n                left={left + unit * 4}\r\n                top={top}\r\n                unit={unit}\r\n                alpha={0.1}\r\n            />\r\n        </g>\r\n    );\r\n};\r\n\r\nexport default ConsoleComps;\r\n","import React from \"react\";\r\n\r\nimport ConsoleComps from \"./ConsoleComps\";\r\n\r\nexport default function Slim({ size, unit, color }) {\r\n    const smallButtonGap = size.width / 3 - unit * 6,\r\n        smallButtonTop = size.height - unit * 20,\r\n        smallButtonLeft = unit * 5;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <svg\r\n                width={size.width}\r\n                height={size.height}\r\n                version=\"1.1\"\r\n                viewBox={`0 0 ${size.width} ${size.height}`}\r\n            >\r\n                <ConsoleComps.Body\r\n                    right={size.width}\r\n                    bottom={size.height}\r\n                    unit={unit}\r\n                    color={color}\r\n                />\r\n                <ConsoleComps.Screen\r\n                    left={unit * 2}\r\n                    top={unit * 5}\r\n                    right={size.width - unit * 2}\r\n                    bottom={size.height - unit * 21}\r\n                    unit={unit}\r\n                    color={\"#313131\"}\r\n                />\r\n                <ConsoleComps.ArrowButtons\r\n                    left={unit * 4}\r\n                    top={size.height - unit * 15}\r\n                    unit={unit}\r\n                />\r\n                {/*\r\n                    left={unit * 5}\r\n                    top={size.height - unit * 20}\r\n                    right={size.width - unit * 5}\r\n                */}\r\n                <ConsoleComps.SmallButtons\r\n                    coords={new Array(4)\r\n                        .fill(null)\r\n                        .map((c, i) => [\r\n                            smallButtonLeft + (unit * 2 + smallButtonGap) * i,\r\n                            smallButtonTop,\r\n                        ])}\r\n                    unit={unit}\r\n                />\r\n                <ConsoleComps.BigButton\r\n                    left={size.width - unit * 8}\r\n                    top={size.height - unit * 13}\r\n                    unit={unit}\r\n                />\r\n                <ConsoleComps.Diagonals\r\n                    left={unit * 7}\r\n                    top={size.height - unit * 6}\r\n                    unit={unit}\r\n                />\r\n            </svg>\r\n            <div\r\n                className=\"screen\"\r\n                style={{\r\n                    left: unit * 5,\r\n                    top: unit * 8,\r\n                    width: size.width - unit * 10,\r\n                    height: size.height - unit * 32,\r\n                }}\r\n            ></div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nimport ConsoleComps from \"./ConsoleComps\";\r\n\r\nexport default function Squared({ size, unit, color }) {\r\n    /*const smallButtonsLeft = unit * 6,\r\n        smallButtonsTop = unit * 5,\r\n        smallButtonsGap = (size.height - smallButtonsTop - unit * 25.5) / 3;*/\r\n    const smallButtonsLeft = unit * 16.5,\r\n        smallButtonsTop = size.height - unit * 13,\r\n        smallButtonsGap = (size.width - unit * 14 - smallButtonsLeft) / 3;\r\n    return (\r\n        <React.Fragment>\r\n            <svg\r\n                width={size.width}\r\n                height={size.height}\r\n                version=\"1.1\"\r\n                viewBox={`0 0 ${size.width} ${size.height}`}\r\n            >\r\n                <ConsoleComps.Body\r\n                    Wide\r\n                    right={size.width}\r\n                    bottom={size.height}\r\n                    color={color}\r\n                    unit={unit}\r\n                />\r\n                <ConsoleComps.Screen\r\n                    left={unit * 7}\r\n                    top={unit * 2}\r\n                    right={size.width - unit * 4}\r\n                    bottom={smallButtonsTop - unit * 2}\r\n                    unit={unit}\r\n                    color={\"#313131\"}\r\n                />\r\n                <ConsoleComps.ArrowButtons\r\n                    left={unit * 9}\r\n                    top={size.height - unit * 14}\r\n                    unit={unit}\r\n                />\r\n                <ConsoleComps.BigButton\r\n                    left={size.width - unit * 10}\r\n                    top={smallButtonsTop + unit / 2}\r\n                    unit={unit}\r\n                />\r\n                {/*<path\r\n                    d={`m${unit * 16.5} ${size.height - unit * 14}\r\n                    H${size.width - unit * 10}\r\n                    v${unit * 2} H${unit * 16.5}`}\r\n                />*/}\r\n                <ConsoleComps.SmallButtons\r\n                    coords={[\r\n                        [smallButtonsLeft + smallButtonsGap, smallButtonsTop],\r\n                        [\r\n                            smallButtonsLeft + unit * 2 + smallButtonsGap * 2,\r\n                            smallButtonsTop,\r\n                        ],\r\n                        [\r\n                            smallButtonsLeft + smallButtonsGap,\r\n                            smallButtonsTop + unit * 4,\r\n                        ],\r\n                        [\r\n                            smallButtonsLeft + unit * 2 + smallButtonsGap * 2,\r\n                            smallButtonsTop + unit * 4,\r\n                        ],\r\n                    ]}\r\n                    unit={unit}\r\n                />\r\n                <ConsoleComps.Diagonals\r\n                    left={unit * 6}\r\n                    top={size.height - unit * 5}\r\n                    unit={unit}\r\n                />\r\n            </svg>\r\n            <div\r\n                className=\"screen\"\r\n                style={{\r\n                    left: unit * 10,\r\n                    top: unit * 5,\r\n                    width: size.width - unit * 17,\r\n                    height: size.height - unit * 23,\r\n                }}\r\n            ></div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nimport ConsoleComps from \"./ConsoleComps\";\r\n\r\nexport default function Wide({ size, unit, color }) {\r\n    const smallButtonTop = unit * 4,\r\n        smallButtonLeft = [\r\n            unit * 6,\r\n            unit * 11,\r\n            size.width - unit * 9,\r\n            size.width - unit * 4,\r\n        ];\r\n    return (\r\n        <React.Fragment>\r\n            <svg\r\n                width={size.width}\r\n                height={size.height}\r\n                version=\"1.1\"\r\n                viewBox={`0 0 ${size.width} ${size.height}`}\r\n            >\r\n                <ConsoleComps.Body\r\n                    Wide\r\n                    right={size.width}\r\n                    bottom={size.height}\r\n                    unit={unit}\r\n                    color={color}\r\n                />\r\n                <ConsoleComps.Screen\r\n                    left={unit * 15}\r\n                    top={unit * 2}\r\n                    right={size.width - unit * 10}\r\n                    bottom={size.height - unit * 2}\r\n                    unit={unit}\r\n                    color={\"#313131\"}\r\n                />\r\n                <ConsoleComps.SmallButtons\r\n                    coords={smallButtonLeft.map((l) => [l, smallButtonTop])}\r\n                    unit={unit}\r\n                />\r\n                <ConsoleComps.ArrowButtons\r\n                    left={unit * 6}\r\n                    top={(size.height - unit * 7) / 2}\r\n                    unit={unit}\r\n                />\r\n                <ConsoleComps.BigButton\r\n                    left={size.width - unit * 7.5}\r\n                    top={(size.height - unit * 4) / 2}\r\n                    unit={unit}\r\n                />\r\n                <ConsoleComps.Diagonals\r\n                    left={unit * 6}\r\n                    top={size.height - unit * 5}\r\n                    unit={unit}\r\n                />\r\n            </svg>\r\n            <div\r\n                className=\"screen\"\r\n                style={{\r\n                    left: unit * 18,\r\n                    top: unit * 5,\r\n                    width: size.width - unit * 31,\r\n                    height: size.height - unit * 10,\r\n                }}\r\n            ></div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Slim from \"./Slim\";\r\nimport Squared from \"./Squared\";\r\nimport Wide from \"./Wide\";\r\n\r\nexport function ConsoleTemplate(props) {\r\n    const { size } = props;\r\n    const ratio = size.width / size.height;\r\n\r\n    if (ratio <= 0.8) {\r\n        const unit = Math.min(size.width / 26, size.height / 46);\r\n\r\n        return <Slim size={size} unit={unit} color={props.color} />;\r\n    }\r\n\r\n    const unit = Math.min(size.width / 46, size.height / 26);\r\n\r\n    return ratio <= 1.2 ? (\r\n        <Squared size={size} unit={unit} color={props.color} />\r\n    ) : (\r\n        <Wide size={size} unit={unit} color={props.color} />\r\n    );\r\n}\r\n","/**\r\n * Measure's the element's bounding box and then renders children\r\n */\r\nimport React from \"react\";\r\nimport debounce from \"debounce\";\r\n\r\nclass MeasureAndRender extends React.Component {\r\n    state = {\r\n        measurement: null,\r\n        hasMeasured: false,\r\n    };\r\n\r\n    onWindowResize = debounce(() => {\r\n        this.setState({\r\n            measurement: this.el.getBoundingClientRect(),\r\n        });\r\n    }, this.props.debounce || 100);\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            measurement: this.el.getBoundingClientRect(),\r\n            hasMeasured: true,\r\n        });\r\n\r\n        window.addEventListener(\"resize\", this.onWindowResize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // stop listening to window resize\r\n        window.removeEventListener(\"resize\", this.onWindowResize);\r\n    }\r\n\r\n    render() {\r\n        let style = {};\r\n        if (this.props.stretch) {\r\n            style.position = \"absolute\";\r\n            style.top = 0;\r\n            style.right = 0;\r\n            style.bottom = 0;\r\n            style.left = 0;\r\n        }\r\n\r\n        const childrenWithProps = React.Children.map(\r\n            this.props.children,\r\n            (child) => {\r\n                if (React.isValidElement(child)) {\r\n                    return React.cloneElement(child, {\r\n                        size: this.state.measurement,\r\n                    });\r\n                }\r\n                return child;\r\n            }\r\n        );\r\n\r\n        return (\r\n            <div\r\n                className={this.props.className}\r\n                style={style}\r\n                ref={(node) => {\r\n                    this.el = node;\r\n                }}\r\n            >\r\n                {this.state.hasMeasured && childrenWithProps}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MeasureAndRender;\r\n","import React from \"react\";\r\n\r\nimport { ConsoleTemplate } from \"./Template\";\r\nimport MeasureAndRender from \"../MeasureAndRender\";\r\n\r\nimport \"./Console.css\";\r\n\r\nexport default function Console(props) {\r\n    return (\r\n        <MeasureAndRender className=\"Console\">\r\n            <ConsoleTemplate color={props.color}></ConsoleTemplate>\r\n        </MeasureAndRender>\r\n    );\r\n}\r\n","import React, { Component } from \"react\";\n\nimport Console from \"./Console\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n    render() {\n        return <Console color=\"#107091\"></Console>;\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}